//LOGIN FORM POP-UP
const form = document.getElementById("loginForm");
const loginBtn = document.getElementById("logBtn");
const closeForm = document.getElementById("closeX");
const signup = document.getElementById("register");
// Show form when Register button is clicked
loginBtn.onclick = function () {
    form.style.display = "flex";
};
// Close form when 'X' is clicked
closeForm.onclick = function () {
    form.style.display = "none";
};
// Close form if user clicks outside the modal content
window.onclick = function (event) {
    if (event.target === form) {
        form.style.display = "none";
    }
};

//REGISTRATION FORM POP-UP
const modal = document.getElementById("registerForm");
const registerBtn = document.getElementById("registerBtn");
const closeModal = document.getElementById("closeForm");
const signin = document.getElementById("signin")

// Show form when Register button is clicked
registerBtn.onclick = function () {
    modal.style.display = "flex";
};
//if user doesn't have an account & can't log in he'll redirect to the registration form from login form
signup.onclick = function () {
    form.style.display = "none";
    modal.style.display = "flex";
};
//if user already has an account & currently is on register form then he'll redirect to the login form from register form
signin.onclick = function () {
    modal.style.display = "none";
    form.style.display = "flex";
};
// Close form when 'X' is clicked
closeModal.onclick = function () {
    modal.style.display = "none";
};
// Close form if user clicks outside the modal content
window.onclick = function (event) {
    if (event.target === modal) {
        modal.style.display = "none";
    }
};

//Register form validation
document.getElementById('registerForm').addEventListener('submit', function (event) {
    const username = document.getElementById('username').value;
    const email = document.getElementById('email').value;
    const password = document.getElementById('password').value;
    const password2 = document.getElementById('password2').value;
    // Validate if all fields are filled
    if (!username || !email || !password || !password2) {
        alert("Please fill in all the fields");
        event.preventDefault(); ¬†// Prevent form submission
        return;
    }
    // Validate if passwords match
    if (password !== password2) {
        alert("Passwords do not match");
        event.preventDefault(); ¬†// Prevent form submission
        return;
    }
    // Check if password meets criteria
    if (password.length < 6) {
        alert("Password must be at least 6 characters");
        event.preventDefault(); ¬†// Prevent form submission
        return;
    }
});




Tech quizzes -
Linux,
Bash,
Docker,
SQL,
CMS,
Code,
DevOps,
React,
Laravel,
PostGreSql,
Django,
CPanel,
NodeJS,
WordPress, 
Next JS,
Vue JS,
Apache Kafka


async function submitQuiz(questions) {
  const category = getCategoryFromUrl();
  const selectedAnswer = document.querySelector('input[name="answer"]:checked');
  if (selectedAnswer) {
    userAnswers[questions.length - 1] = selectedAnswer.value;
  }
  let correctAnswers = 0;
  let quizData = [];
  questions.forEach((question, index) => {
    const userAnswer = userAnswers[index] || null;
    if (question.answer == userAnswer) {
      correctAnswers++;
    }

    quizData.push({
      q: question.question,
      o: [question.option1, question.option2, question.option3, question.option4],
      c: question.answer,
      u: userAnswer
    });
  });

  // Display quiz result
  const quizContainer = document.getElementById('quiz-container');
  const resultsContainer = document.createElement('div');
  resultsContainer.id = 'results-container';
  resultsContainer.innerHTML = `<h2>Quiz Results</h2><p>Your score: ${correctAnswers} / ${questions.length}</p>`;

  quizContainer.innerHTML = '';
  quizContainer.appendChild(resultsContainer);

  const restartButton = document.createElement('button');
  restartButton.textContent = 'Restart Quiz';
  restartButton.addEventListener('click', () => {
    location.reload();
  });
  resultsContainer.appendChild(restartButton);

  const homeButton = document.createElement('button');
  homeButton.textContent = 'Go to Home';
  homeButton.addEventListener('click', () => {
    window.location.href = '/';
  });
  resultsContainer.appendChild(homeButton);

  // Send quiz progress to the backend
  try {
    const response = await fetch('/save-quiz-progress', {
      method: 'POST',
      headers: {'Content-Type': 'application/json'},
      body: JSON.stringify({
        category: category,
        score: correctAnswers,
        questions_json: JSON.stringify(quizData)
      })
    });
    const data = await response.json();
    alert(data.message);
  } catch (error) {
    alert("Error in saving progress!")
    console.log('Error saving progress: ', error);
  }
}


<!--script>
        function getCategoryFromUrl() {
  const params = new URLSearchParams(window.location.search);
  return params.get('category');
}
function getSubCategoryFromUrl() {
  const params = new URLSearchParams(window.location.search);
  return params.get('sub-category');
}
        document.addEventListener("DOMContentLoaded", () => {
    console.log("DOM fully loaded");
   const category = getCategoryFromUrl();

   const difficulty = getSubCategoryFromUrl();
    document.getElementById('start-btn').addEventListener('click', startQuiz(category, difficulty));
    document.getElementById('submit-btn').addEventListener('click', submitExamQuiz);
  });
  
  let questions = [];
  let timer;
  let isTimerRunning = false;
  const totalTime = 160;
  
  function startQuiz(category, subCategory) {
    
    fetchQuestions(category, subCategory);
}

  
  function startTimer() {
      if (isTimerRunning) return;
      isTimerRunning = true;
  
      let timeLeft = totalTime;
      const timerDisplay = document.getElementById('time');
  
      timer = setInterval(() => {
          timerDisplay.innerText = `${timeLeft} sec`;
  
          if (timeLeft <= 0) {
              clearInterval(timer);
              alert("‚è≥ Time's up! Submitting your quiz...");
              submitExamQuiz();
          }
  
          timeLeft--;
      }, 1000);
  }
  
  function submitExamQuiz() {
      clearInterval(timer);
      let totalQuestions = questions.length;
      let correctAnswers = 0;
      let unansweredCount = 0;
  
      questions.forEach((question, index) => {
          const selectedOption = document.querySelector(`input[name="question${index}"]:checked`);
  
          if (selectedOption) {
              const selectedIdentifier = selectedOption.value.trim();
              const optionIndex = ['A', 'B', 'C', 'D'].indexOf(selectedIdentifier);
  
              if (optionIndex !== -1) {
                  const selectedText = question.options[optionIndex].trim();
                  if (selectedText === question.correct_answer.trim()) {
                      correctAnswers++;
                  }
              }
          } else {
              unansweredCount++;
          }
      });
  
      if (unansweredCount > 0) {
          alert(`‚ö†Ô∏è You have ${unansweredCount} unanswered question(s). Please attempt all questions before submitting.`);
          return;
      }
  
      document.getElementById('score-display').innerText = correctAnswers;
      document.getElementById('total-questions').innerText = totalQuestions;
      document.getElementById('score-container').style.display = 'block';
      document.getElementById('submit-btn').style.display = 'none';
  
      let restartBtn = document.getElementById('restart-btn');
      if (!restartBtn) {
          restartBtn = document.createElement('button');
          restartBtn.id = 'restart-btn';
          restartBtn.innerText = 'Restart Quiz';
          restartBtn.style.display = 'inline-block';
          restartBtn.style.margin = '10px';
          restartBtn.style.padding = '10px 20px';
          restartBtn.style.backgroundColor = '#4CAF50';
          restartBtn.style.color = 'white';
          restartBtn.style.border = 'none';
          restartBtn.style.cursor = 'pointer';
          
          document.getElementById('quiz-container').appendChild(restartBtn);
      } else {
          restartBtn.style.display = 'inline-block';
      }
      restartBtn.addEventListener('click', () => location.reload());
  }
  
  function displayAllQuestions() {
      const questionsContainer = document.getElementById('options-container');
      questionsContainer.innerHTML = '';
  
      if (!questions.length) {
          alert("No questions available.");
          return;
      }
  
      questions.forEach((question, index) => {
          const questionElement = document.createElement('div');
          questionElement.classList.add('question-block');
  
          questionElement.innerHTML = `
              <p><strong>${index + 1}. ${question.question}</strong></p>
              <div>
                  <input type="radio" name="question${index}" value="A"> A. ${question.options[0]}<br>
                  <input type="radio" name="question${index}" value="B"> B. ${question.options[1]}<br>
                  <input type="radio" name="question${index}" value="C"> C. ${question.options[2]}<br>
                  <input type="radio" name="question${index}" value="D"> D. ${question.options[3]}
              </div>
          `;
  
          questionsContainer.appendChild(questionElement);
      });
  }
  
  async function fetchQuestions(category, subCategory) {
      try {
          const url = `/get-questions?category=${encodeURIComponent(category)}&sub_category=${encodeURIComponent(subCategory)}`;
          console.log("üîç Fetching from URL:", url);
  
          const response = await fetch(url);
          if (!response.ok) throw new Error(`Failed to fetch questions: ${response.status}`);
  
          const data = await response.json();
          if (!data.length) {
              alert("No questions found for the selected category and difficulty.");
              return;
          }
  
          questions = data.map(q => ({
              id: q.id,
              question: q.question,
              options: [q.option_a, q.option_b, q.option_c, q.option_d],
              correct_answer: q.correct_answer
          }));
  
          displayAllQuestions();
      } catch (error) {
          console.log("Error fetching questions:", error);
          alert("Error loading questions. Please try again.");
      }
  }
  
    </script-->

    <!--script>
        function getCategoryFromUrl() {
    const params = new URLSearchParams(window.location.search);
    return params.get('category');
}

function getSubCategoryFromUrl() {
    const params = new URLSearchParams(window.location.search);
    return params.get('sub-category');
}

document.addEventListener("DOMContentLoaded", () => {
    console.log("DOM fully loaded");

    const category = getCategoryFromUrl();
    const difficulty = getSubCategoryFromUrl();

    document.getElementById('start-btn').addEventListener('click', () => startQuiz(category, difficulty));
    document.getElementById('submit-btn').addEventListener('click', submitExamQuiz);
});

let questions = [];
let timer;
let isTimerRunning = false;
const totalTime = 160;

function startQuiz(category, subCategory) {
    fetchQuestions(category, subCategory);
}

function startTimer() {
    if (isTimerRunning) return;
    isTimerRunning = true;

    let timeLeft = totalTime;
    const timerDisplay = document.getElementById('time');

    timer = setInterval(() => {
        timerDisplay.innerText = `${timeLeft} sec`;

        if (timeLeft <= 0) {
            clearInterval(timer);
            alert("‚è≥ Time's up! Submitting your quiz...");
            submitExamQuiz();
        }

        timeLeft--;
    }, 1000);
}

function submitExamQuiz() {
    clearInterval(timer);

    let totalQuestions = questions.length;
    let correctAnswers = 0;
    let unansweredCount = 0;

    questions.forEach((question, index) => {
        const selectedOption = document.querySelector(`input[name="question${index}"]:checked`);

        if (selectedOption) {
            const selectedIdentifier = selectedOption.value.trim();
            const optionIndex = ['A', 'B', 'C', 'D'].indexOf(selectedIdentifier);

            if (optionIndex !== -1) {
                const selectedText = question.options[optionIndex].trim();
                if (selectedText === question.correct_answer.trim()) {
                    correctAnswers++;
                }
            }
        } else {
            unansweredCount++;
        }
    });

    document.getElementById('score-display').innerText = correctAnswers;
    document.getElementById('total-questions').innerText = totalQuestions;
    document.getElementById('score-container').style.display = 'block';
    document.getElementById('submit-btn').style.display = 'none';

    if (unansweredCount > 0) {
        alert(`‚ö†Ô∏è You left ${unansweredCount} question(s) unanswered.`);
    }

    let restartBtn = document.getElementById('restart-btn');
    if (!restartBtn) {
        restartBtn = document.createElement('button');
        restartBtn.id = 'restart-btn';
        restartBtn.innerText = 'Restart Quiz';
        restartBtn.style.display = 'inline-block';
        restartBtn.style.margin = '10px';
        restartBtn.style.padding = '10px 20px';
        restartBtn.style.backgroundColor = '#4CAF50';
        restartBtn.style.color = 'white';
        restartBtn.style.border = 'none';
        restartBtn.style.cursor = 'pointer';

        document.getElementById('quiz-container').appendChild(restartBtn);
    } else {
        restartBtn.style.display = 'inline-block';
    }
    restartBtn.addEventListener('click', () => location.reload());
}

/*function displayAllQuestions() {
    const questionsContainer = document.getElementById('options-container');
    questionsContainer.innerHTML = '';

    if (!questions.length) {
        alert("No questions available.");
        return;
    }

    questions.forEach((question, index) => {
        const questionElement = document.createElement('div');
        questionElement.classList.add('question-block');

        questionElement.innerHTML = `
            <p><strong>${index + 1}. ${question.question}</strong></p>
            <div>
                <input type="radio" name="question${index}" value="A"> A. ${question.options[0]}<br>
                <input type="radio" name="question${index}" value="B"> B. ${question.options[1]}<br>
                <input type="radio" name="question${index}" value="C"> C. ${question.options[2]}<br>
                <input type="radio" name="question${index}" value="D"> D. ${question.options[3]}
            </div>
        `;

        questionsContainer.appendChild(questionElement);
    });

    // ‚úÖ Start timer when questions are displayed
    startTimer();
}
*/
function displayAllQuestions() {
    const questionsContainer = document.getElementById('options-container');
    questionsContainer.innerHTML = '';

    if (!questions.length) {
        alert("No questions available.");
        return;
    }

    questions.forEach((question, index) => {
        const questionElement = document.createElement('div');
        questionElement.classList.add('question-block');

        questionElement.innerHTML = `
            <p><strong>${index + 1}. ${question.question}</strong></p>
            <div>
                <input type="radio" name="question${index}" value="A"> A. ${question.options[0]}<br>
                <input type="radio" name="question${index}" value="B"> B. ${question.options[1]}<br>
                <input type="radio" name="question${index}" value="C"> C. ${question.options[2]}<br>
                <input type="radio" name="question${index}" value="D"> D. ${question.options[3]}
            </div>
        `;

        questionsContainer.appendChild(questionElement);
    });

    // ‚úÖ Start the timer when questions are displayed
    startTimer();  // <--- ADD THIS LINE
}

async function fetchQuestions(category, subCategory) {
    try {
        const url = `/get-questions?category=${encodeURIComponent(category)}&sub_category=${encodeURIComponent(subCategory)}`;
        console.log("üîç Fetching from URL:", url);

        const response = await fetch(url);
        if (!response.ok) throw new Error(`Failed to fetch questions: ${response.status}`);

        const data = await response.json();
        if (!data.length) {
            alert("No questions found for the selected category and difficulty.");
            return;
        }

        questions = data.map(q => ({
            id: q.id,
            question: q.question,
            options: [q.option_a, q.option_b, q.option_c, q.option_d],
            correct_answer: q.correct_answer
        }));

        displayAllQuestions();
    } catch (error) {
        console.log("Error fetching questions:", error);
        alert("Error loading questions. Please try again.");
    }
}

    </script-->

<!--script>
        let questions = [];

async function fetchQuestions(category, subCategory) {
    try {
        const url = `/get-questions?category=${encodeURIComponent(category)}&sub_category=${encodeURIComponent(subCategory)}`;
        console.log("üîç Fetching from URL:", url);

        const response = await fetch(url);
        if (!response.ok) throw new Error(`Failed to fetch questions: ${response.status}`);

        const data = await response.json();
        console.log("üìå Fetched Questions:", data);

        if (!Array.isArray(data) || data.length === 0) {
            alert("No questions found for the selected category and difficulty.");
            return;
        }

        // Store fetched questions globally
        questions = data.map(q => ({
            id: q.id,
            question: q.question,
            options: [q.option_a, q.option_b, q.option_c, q.option_d],
            correct_answer: q.correct_answer
        }));

        // Display questions
        displayAllQuestions();
    } catch (error) {
        console.error("Error fetching questions:", error);
        alert("Error loading questions. Please try again.");
    }
}

function displayAllQuestions() {
    console.log("üìå Displaying questions...");
    const questionsContainer = document.getElementById('options-container');
    questionsContainer.innerHTML = '';

    if (!questions.length) {
        alert("No questions available.");
        return;
    }

    questions.forEach((question, index) => {
        const questionElement = document.createElement('div');
        questionElement.classList.add('question-block');

        questionElement.innerHTML = `
            <p><strong>${index + 1}. ${question.question}</strong></p>
            <div>
                <input type="radio" name="question${index}" value="A"> A. ${question.options[0]}<br>
                <input type="radio" name="question${index}" value="B"> B. ${question.options[1]}<br>
                <input type="radio" name="question${index}" value="C"> C. ${question.options[2]}<br>
                <input type="radio" name="question${index}" value="D"> D. ${question.options[3]}
            </div>
        `;

        questionsContainer.appendChild(questionElement);
    });
}

function startQuiz() {
    const categoryInput = document.getElementById("category");
    const subCategoryInput = document.getElementById("subCategory");
    
    if (!categoryInput || !subCategoryInput) {
        alert("Category or difficulty input not found.");
        return;
    }
    
    const category = categoryInput.value.trim();
    const subCategory = subCategoryInput.value.trim();

    console.log("üìå Starting quiz with:", category, subCategory);

    if (!category || !subCategory) {
        alert("Please select category and difficulty before starting the quiz.");
        return;
    }

    fetchQuestions(category, subCategory);
}

    </script-->

/*function calculateScore(questions, userAnswers) {
  let correctAnswers = 0;
  let quizData = [];
  console.log(questions);
  questions.forEach((question, index) => {
      const userAnswer = userAnswers[index] || null;
      
      // Handling tech & non-tech quiz answer formats correctly
      const correctAnswer = question.answer || question.correct_answer;
      
      if (userAnswer && userAnswer === correctAnswer) {
          correctAnswers++;
      }

      quizData.push({
          q: question.question,
          o: question.options || [question.option1, question.option2, question.option3, question.option4],
          c: correctAnswer,
          u: userAnswer
      });
  });

  return { correctAnswers, quizData };
}*/

/*function displayQuiz(data, quizType) {
  if (!data || data.length === 0) {
      console.error("Error: No data received.");
      alert("No questions available.");
      return;
  }

  console.log("Fetched Data Structure:", data);

  const questionContainer = document.getElementById('question-container');
  const nextBtn = document.getElementById('next-btn');
  const submitBtn = document.getElementById('submit-btn');

  let questions = [];
  let currentQuestionIndex = 0;
  let userAnswers = [];

  if (quizType === "tech") {
      if (!Array.isArray(data)) {
          console.error("Error: Expected an array but received:", data);
          alert("Invalid response format.");
          return;
      }

      questions = data.map(q => ({
          question: q.question || "No question available",
          options: q.answers ? Object.values(q.answers).filter(opt => opt !== null) : [],
          answer: q.correct_answer || "No answer provided"
      }));
  } else {
      questions = data.results ? data.results.map(q => ({
          question: q.question || "No question available",
          options: [...(q.incorrect_answers || []), q.correct_answer].sort(() => Math.random() - 0.5),
          answer: q.correct_answer || "No answer provided"
      })) : [];
  }

  console.log("Processed Questions:", questions);

  if (questions.length === 0) {
      alert("No valid questions found.");
      return;
  }

  function showQuestion(index) {
      const q = questions[index];

      console.log(`Displaying Question ${index + 1}:`, q);

      if (!q.options || q.options.length === 0) {
          console.error(`Missing options for question ${index + 1}`, q);
          alert("Some questions have missing options.");
          return;
      }

      questionContainer.innerHTML = `
          <h2>${index + 1}. ${q.question}</h2>
          <ul>
              ${q.options.map(option => 
                  `<li><label><input type="radio" name="answer" value="${index}"> ${option}</label></li>`
              ).join("")}
          </ul>
      `;
  }

  showQuestion(currentQuestionIndex);

  nextBtn.addEventListener('click', () => {
      const selectedAnswer = document.querySelector('input[name="answer"]:checked');
      if (!selectedAnswer) {
          alert('Please select an answer!');
          return;
      }

      userAnswers[currentQuestionIndex] = selectedAnswer.value;
      currentQuestionIndex++;

      if (currentQuestionIndex < questions.length) {
          showQuestion(currentQuestionIndex);
      } else {
          nextBtn.style.display = 'none';
          submitBtn.style.display = 'block';
      }
  });

  submitBtn.addEventListener('click', () => {
      const selectedAnswer = document.querySelector('input[name="answer"]:checked');
      if (!selectedAnswer) {
          alert('Please select an answer!');
          return;
      }

      userAnswers[currentQuestionIndex] = selectedAnswer.value;
      submitAPIQuiz(questions, userAnswers);
  });
}*/

/*function displayQuiz(data, quizType) {
  if (!data || data.length === 0) {
      console.error("Error: No data received.");
      alert("No questions available.");
      return;
  }

  console.log("Fetched Data Structure:", data);

  const questionContainer = document.getElementById('question-container');
  const nextBtn = document.getElementById('next-btn');
  const submitBtn = document.getElementById('submit-btn');

  let questions = [];
  let currentQuestionIndex = 0;
  let userAnswers = [];

  if (quizType === "tech") {
      if (!Array.isArray(data)) {
          console.error("Error: Expected an array but received:", data);
          alert("Invalid response format.");
          return;
      }

      questions = data.map(q => ({
          question: q.question || "No question available",
          options: q.answers ? Object.values(q.answers).filter(opt => opt !== null) : [],
          answer: q.correct_answer || "No answer provided"
      }));
  } else {
      questions = data.results ? data.results.map(q => ({
          question: q.question || "No question available",
          options: [...(q.incorrect_answers || []), q.correct_answer].sort(() => Math.random() - 0.5),
          answer: q.correct_answer || "No answer provided"
      })) : [];
  }

  console.log("Processed Questions:", questions);

  if (questions.length === 0) {
      alert("No valid questions found.");
      return;
  }

  function showQuestion(index) {
      const q = questions[index];

      console.log(`Displaying Question ${index + 1}:`, q);

      if (!q.options || q.options.length === 0) {
          console.error(`Missing options for question ${index + 1}`, q);
          alert("Some questions have missing options.");
          return;
      }

      questionContainer.innerHTML = `
          <h2>${index + 1}. ${q.question}</h2>
          <ul>
              ${q.options.map(option => 
                  `<li><label><input type="radio" name="answer" value="${index}"> ${option}</label></li>`
              ).join("")}
          </ul>
      `;
  }

  showQuestion(currentQuestionIndex);

  nextBtn.addEventListener('click', () => {
      const selectedAnswer = document.querySelector('input[name="answer"]:checked');
      if (!selectedAnswer) {
          alert('Please select an answer!');
          return;
      }

      userAnswers[currentQuestionIndex] = selectedAnswer.value;
      currentQuestionIndex++;

      if (currentQuestionIndex < questions.length) {
          showQuestion(currentQuestionIndex);
      } else {
          nextBtn.style.display = 'none';
          submitBtn.style.display = 'block';
      }
  });

  submitBtn.addEventListener('click', () => {
      const selectedAnswer = document.querySelector('input[name="answer"]:checked');
      if (!selectedAnswer) {
          alert('Please select an answer!');
          return;
      }

      userAnswers[currentQuestionIndex] = selectedAnswer.value;
      submitAPIQuiz(questions, userAnswers);
  });
}*/

/*function fetchAndDisplayQuiz() {
  const category = getCategoryFromUrl();
  if (!category) {
    alert('No category selected!');
    window.location.href = '/';
    return;
  }
  // Update the quiz title
  document.getElementById('quiz-title').textContent = `Quiz: ${category}`;

  // Fetch quiz questions
  fetch(`/quiz/${category}`)
    .then(response => response.json())
    .then(questions => {
      if (questions.length === 0) {
        alert('No questions found for this category!');
        return;
      }

      displayQuestions(questions);
    })
    .catch(error => {
      console.error('Error fetching quiz questions:', error);
      alert('Unable to load quiz questions.');
    });
}*/


<!--style>
    header {
    text-align: center;
    margin-bottom: 20px;
    }
   .top-section {
    background-color: #222;
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding: 10px 20px;
}
.logo {
    width: 100%;
    max-width: 200px;
    height: 100px;
    object-fit: cover;
    margin-right: 25px;
}
.back-btn {
    text-decoration: none;
    color: #ffffff;                  
    font-weight: bold;
    font-size: 16px;
    padding: 8px 16px;
    border: 2px solid #6c63ff;     
    border-radius: 5px;             
    background-color: transparent;  
    transition: background 0.3s, color 0.3s;
    display: inline-block;           
    text-align: center;
}

.back-btn:hover {
    background: #6c63ff;            
    color: #fff;
    cursor: pointer;
    box-shadow: 0 0 10px #6c63ff;   
}

#timer {
    font-size: 1.5em;
    color: #d9534f; /* Bootstrap danger color */
}

#questions-container {
    background: white;
    border-radius: 5px;
    padding: 20px;
    box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
    margin-bottom: 20px;

    /* ‚úÖ Add these styles to minimize width and center it */
    max-width: 800px;         /* Set the maximum width */
    margin: 0 auto;            /* Center the container */
}

.question {
    margin-bottom: 15px;
}

button {
    background-color: #5bc0de; /* Bootstrap info color */
    color: white;
    border: none;
    border-radius: 5px;
    padding: 10px 15px;
    cursor: pointer;
    font-size: 1em;
    margin: 5px;
}

button:hover {
    background-color: #31b0d5; /* Darker shade on hover */
}

.question-block {
    margin-bottom: 20px;
    padding: 15px;
    border: 1px solid #ccc;
    border-radius: 5px;
    background-color: #f9f9f9;
}

.question-block p {
    font-weight: bold;
}

</style-->
    
/*document.getElementById("quizForm").addEventListener("submit", async function(event) {
    event.preventDefault(); // Prevent page refresh

    const quizType = document.getElementById("quizType").value;
    const topic = document.getElementById("topic").value.toLowerCase(); // Convert topic to lowercase
    const difficulty = document.getElementById("difficulty").value;
    const numQuestions = document.getElementById("numQuestions").value;

    let apiUrl = "";
    let api_key = "OAB3ETb0hrR3UFBwttBTNsxiQJZx61uHSf2zlWKN";
    if (quizType === "tech") {
        // Fetch from Tech Quiz API (QuizAPI.io)
        apiUrl = `https://quizapi.io/api/v1/questions?apiKey=${api_key}&category=${topic}&difficulty=${difficulty}&limit=${numQuestions}`;
    } else {
        apiUrl = `https://opentdb.com/api.php?amount=${numQuestions}&category=${topic}&difficulty=${difficulty}&type=multiple`;
    }
    try {
        const response = await fetch(apiUrl);
        const data = await response.json();
        displayQuiz(data, quizType); // Call function to display quiz
    } catch (error) {
        console.error("Error fetching quiz:", error);
    }
  });*/




  function renderCohortTable(cohortData, daysNum) {
    const container = document.getElementById('cohortTableContainer');
    if (!cohortData || !cohortData.length) {
        container.innerHTML = '<p style="text-align:center; padding: 20px;">No cohort data available</p>';
        return;
    }

    // Make container take full width
    container.style.width = '100%';
    container.style.maxWidth = '100%';
    container.style.boxSizing = 'border-box';

    // Get today's date
    const today = new Date();

    // Calculate dates dynamically based on daysNum
    const dates =[];
    for (let i = daysNum - 1; i >= 0; i--) {
        const date = new Date(today);
        date.setDate(today.getDate() - i);
        dates.push(formatDateForInput(date));
    }

    // Filter and process data for the specified days
    const processedData =[];

    // Add "All Users" row
    const allUsersRow = {
        cohort_date: "All Users",
        isAllUsers: true,
        initialUsers: 0,
        daysData: {}
    };

    // Process each date-specific row
    dates.forEach(dateStr => {
        const dataForDate = cohortData.find(row => row.cohort_date === dateStr);
        if (dataForDate) {
            const initialUsers = dataForDate.Day0 || 0;

            // Calculate totals for All Users row
            allUsersRow.initialUsers += initialUsers;

            // Only include rows with users
            if (initialUsers > 0) {
                const row = {
                    cohort_date: dateStr,
                    isAllUsers: false,
                    initialUsers: initialUsers,
                    daysData: {}
                };

                // Calculate retention for each day (dynamically)
                dates.forEach((compareDate, dayIndex) => {
                    const dayKey = `Day${dayIndex}`;
                    const usersForDay = dataForDate[dayKey] || 0;

                    // Add to all users row data
                    if (!allUsersRow.daysData[dayIndex]) {
                        allUsersRow.daysData[dayIndex] = 0;
                    }
                    allUsersRow.daysData[dayIndex] += usersForDay;

                    // Calculate percentage for this cohort
                    row.daysData[dayIndex] = {
                        users: usersForDay,
                        percentage: dayIndex === 0 ? 100 : (usersForDay / initialUsers * 100)
                    };
                });

                processedData.push(row);
            }
        }
    });

    // Calculate percentages for All Users row
    if (allUsersRow.initialUsers > 0) {
        Object.keys(allUsersRow.daysData).forEach(dayIndex => {
            const day = parseInt(dayIndex);
            const users = allUsersRow.daysData[day];
            allUsersRow.daysData[day] = {
                users: users,
                percentage: day === 0 ? 100 : (users / allUsersRow.initialUsers * 100)
            };
        });

        // Add All Users row to the beginning
        processedData.unshift(allUsersRow);
    }

    // Create outer container with border - CHANGE THIS TO 100%
    const outerContainer = document.createElement('div');
    outerContainer.style.width = '100%'; // Change from 50% to 100%
    outerContainer.style.boxSizing = 'border-box';
    outerContainer.style.border = '1px solid #e1e1e1';
    outerContainer.style.borderRadius = '4px';
    outerContainer.style.overflow = 'hidden'; // Ensure inner elements don't overflow

    // Main title - only once at the top
    const mainTitle = document.createElement('div');
    mainTitle.textContent = 'User Activity by Cohort';
    mainTitle.style.padding = '12px 16px';
    mainTitle.style.fontSize = '14px';
    mainTitle.style.fontWeight = 'bold';
    mainTitle.style.borderBottom = '1px solid #e1e1e1';
    outerContainer.appendChild(mainTitle);

    // Create table container
    const tableContainer = document.createElement('div');
    tableContainer.style.width = '100%';

    // Create table
    const table = document.createElement('table');
    table.className = 'cohort-table';
    table.style.width = '100%';
    table.style.borderCollapse = 'collapse';
    table.style.tableLayout = 'fixed';
    table.style.fontFamily = 'Arial, sans-serif';
    table.style.fontSize = '12px';

    // Create table header
    const thead = document.createElement('thead');

    // Create header row for dates only
    const headerRow = document.createElement('tr');

    // Empty corner cell
    const cornerCell = document.createElement('th');
    cornerCell.style.padding = '10px 16px';
    cornerCell.style.textAlign = 'left';
    cornerCell.style.borderBottom = '1px solid #e1e1e1';
    cornerCell.style.borderRight = '1px solid #e1e1e1';
    headerRow.appendChild(cornerCell);

    // Add date column headers (dynamically)
    dates.forEach((dateStr, index) => {
        const date = new Date(dateStr);
        const headerCell = document.createElement('th');
        headerCell.textContent = formatShortDate(date);
        headerCell.style.padding = '10px 16px';
        headerCell.style.textAlign = 'center';
        headerCell.style.borderBottom = '1px solid #e1e1e1';
        headerCell.style.borderRight = index < dates.length - 1 ? '1px solid #e1e1e1' : 'none';
        headerCell.style.fontWeight = 'bold';
        headerRow.appendChild(headerCell);
    });

    thead.appendChild(headerRow);
    table.appendChild(thead);

    // Create table body
    const tbody = document.createElement('tbody');

    // Define column-specific blue shades that match each other
    const getColumnColor = (colIndex) => {
        // Fixed column colors from the screenshot
        const columnColors = [
            '#4169e1', // Royal blue for column 1
            '#45b4c5', // Medium teal for column 2
            '#65c2de'  // Light blue for column 3
        ];

        // Extend or repeat colors if needed
        return columnColors[colIndex % columnColors.length];
    };

    // All these colors are dark enough for white text
    const getTextColorForBackground = (bgColor) => {
        if (bgColor !== '#ffffff') {
            return '#ffffff';
        }
        return '#000000'; // Black text for white background
    };

    // Add data rows
    processedData.forEach(row => {
        const dataRow = document.createElement('tr');

        // Add row label
        const labelCell = document.createElement('td');
        if (row.isAllUsers) {
            labelCell.textContent = 'Total Users';
            labelCell.style.fontWeight = 'bold';
        } else {
            const dateObj = new Date(row.cohort_date);
            labelCell.textContent = formatShortDate(dateObj);
        }
        labelCell.style.padding = '10px 16px';
        labelCell.style.borderRight = '1px solid #e1e1e1';
        labelCell.style.borderBottom = '1px solid #e1e1e1';
        dataRow.appendChild(labelCell);

        // Add data cells (dynamically)
        dates.forEach((dateStr, idx) => {
            const dataCell = document.createElement('td');
            dataCell.style.padding = '0';
            dataCell.style.textAlign = 'center';
            dataCell.style.borderRight = idx < dates.length - 1 ? '1px solid #e1e1e1' : 'none';
            dataCell.style.borderBottom = '1px solid #e1e1e1';
            dataCell.style.position = 'relative';
            dataCell.style.height = '60px';

            const dayData = row.daysData[idx];
            let userCount = 0;
            let percentage = 0;

            if (dayData) {
                userCount = dayData.users;
                percentage = dayData.percentage || 0;
            }

            // Create the colored block
            const colorBlock = document.createElement('div');
            colorBlock.style.position = 'absolute';
            colorBlock.style.top = '0';
            colorBlock.style.left = '0';
            colorBlock.style.width = '100%';
            colorBlock.style.height = '100%';

            // Only color cells with data
            if (percentage > 0) {
                // Set column-specific color
                const bgColor = getColumnColor(idx);
                colorBlock.style.backgroundColor = bgColor;
            } else {
                colorBlock.style.backgroundColor = '#ffffff'; // White for empty cells
            }

            dataCell.appendChild(colorBlock);

            // Add text content
            if (userCount > 0 || idx === 0) {
                const bgColor = percentage > 0 ? getColumnColor(idx) : '#ffffff';
                const textColor = getTextColorForBackground(bgColor);

                // Create container for text to sit on top of color block
                const textContainer = document.createElement('div');
                textContainer.style.position = 'absolute';
                textContainer.style.top = '50%';
                textContainer.style.left = '50%';
                textContainer.style.transform = 'translate(-50%, -50%)';
                textContainer.style.width = '100%';
                textContainer.style.zIndex = '1'; // Ensure text is on top

                // Format user count with commas for thousands
                const formattedCount = userCount.toLocaleString();

                // Format percentage with one decimal place
                const formattedPercentage = percentage === 0 ? '0%' :
                    percentage === 100 ? '100%' :
                        `${percentage.toFixed(1)}%`;

                // Set inner HTML for text content
                textContainer.innerHTML = `
                        <div style="font-size: 14px; color: ${textColor}; margin-bottom: 4px;">${formattedCount}</div>
                        <div style="font-size: 12px; color: ${textColor}; font-weight: bold;">${formattedPercentage}</div>
                    `;

                dataCell.appendChild(textContainer);
            }

            dataRow.appendChild(dataCell);
        });

        tbody.appendChild(dataRow);
    });

    table.appendChild(tbody);
    tableContainer.appendChild(table);
    outerContainer.appendChild(tableContainer);

    // Clear container and add the table
    container.innerHTML = '';
    container.appendChild(outerContainer);
}

// Helper function to format dates
function formatDateForInput(date) {
    const year = date.getFullYear();
    const month = String(date.getMonth() + 1).padStart(2, '0');
    const day = String(date.getDate()).padStart(2, '0');
    return `${year}-${month}-${day}`;
}

// Helper function to format dates for display
function formatShortDate(date) {
    const options = { month: 'short', day: 'numeric' };
    return date.toLocaleDateString('en-US', options);
}

// Example usage (assuming you have 'daysNum' from the dropdown)
const daysNum = 7; // Example: Get this from your dropdown
const cohortData = [
    { cohort_date: "2024-03-18", Day0: 100, Day1: 50, Day2: 30, Day3: 20, Day4: 15, Day5: 10, Day6: 5 },
    { cohort_date: "2024-03-19", Day0: 120, Day1: 60, Day2: 40, Day3: 30, Day4: 25, Day5: 15, Day6: 8 },
    { cohort_date: "2024-03-20", Day0: 80, Day1: 40, Day2: 25, Day3: 18, Day4: 12, Day5: 7, Day6: 3 },
    // ... more data
];

// Initial rendering with 2 days
renderCohortTable(cohortData, 2);

// Dropdown change event handling
const dropdown = document.getElementById('daysDropdown'); // Replace with your dropdown ID
dropdown.addEventListener('change', function() {
    const selectedDays = parseInt(this.value); // Get the selected value (e.g., 2, 7, 15, 30)
    // Assuming you have your cohort data in a variable called cohortData
    renderCohortTable(cohortData, selectedDays);
});